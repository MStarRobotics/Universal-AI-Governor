name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      checks: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Rust caches
      run: |
        rm -rf ~/.cargo/registry
        rm -rf ~/.cargo/git
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtss2-dev \
          tpm2-tools \
          libopencv-dev \
          libclang-dev
          
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl tpm2-tools opencv llvm
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm opencv
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --all-features --verbose
      
    - name: Run integration tests
      run: cargo test --test '*' --all-features
      
    - name: Run doc tests
      run: cargo test --doc --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Rust caches
      run: |
        rm -rf ~/.cargo/registry
        rm -rf ~/.cargo/git
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Install cargo-deny
      run: cargo install cargo-deny
      
    - name: Run security audit
      run: cargo audit
      
    - name: Check licenses and dependencies
      run: cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Rust caches
      run: |
        rm -rf ~/.cargo/registry
        rm -rf ~/.cargo/git
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtss2-dev \
          tpm2-tools \
          libopencv-dev \
          libclang-dev
          
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Generate code coverage
      run: |
        cargo tarpaulin \
          --all-features \
          --workspace \
          --timeout 300 \
          --out Xml \
          --exclude-files 'target/*' 'tests/*' 'benches/*'
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    env:
      RUST_BACKTRACE: full
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Rust caches
      run: |
        rm -rf ~/.cargo/registry
        rm -rf ~/.cargo/git
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtss2-dev \
          tpm2-tools \
          libopencv-dev \
          libclang-dev
          
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Run benchmarks
      run: cargo bench --all-features > benchmark_output.txt 2>&1
      
    - name: Upload benchmark output
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-output
        path: benchmark_output.txt
      
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      checks: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: universal-ai-governor
            asset_name: universal-ai-governor-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: universal-ai-governor
            asset_name: universal-ai-governor-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: universal-ai-governor.exe
            asset_name: universal-ai-governor-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: universal-ai-governor
            asset_name: universal-ai-governor-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: universal-ai-governor
            asset_name: universal-ai-governor-macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Rust caches
      run: |
        rm -rf ~/.cargo/registry
        rm -rf ~/.cargo/git
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          libtss2-dev \
          tpm2-tools \
          libopencv-dev \
          libclang-dev
          
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl tpm2-tools opencv llvm
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm opencv
        
    - name: Build release binary
      run: |
        cargo build \
          --release \
          --target ${{ matrix.target }} \
          --all-features
          
    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: morningstarxcd/universal-ai-governor
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, coverage, build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          - `morningstarxcd/universal-ai-governor:latest`
          - `morningstarxcd/universal-ai-governor:v${{ github.run_number }}`
          
          ## Installation
          ```bash
          # Download binary
          curl -L https://github.com/MStarRobotics/Universal-AI-Governor/releases/download/v${{ github.run_number }}/universal-ai-governor-linux-amd64 -o universal-ai-governor
          chmod +x universal-ai-governor
          
          # Or use Docker
          docker run morningstarxcd/universal-ai-governor:v${{ github.run_number }}
          ```
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
