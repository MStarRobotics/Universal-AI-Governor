version: '3.8'

services:
  # Universal AI Governor main service
  universal-ai-governor:
    build:
      context: .
      dockerfile: Dockerfile
    image: universal-ai-governor:latest
    container_name: uag-main
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models:ro
      - ./certs:/app/certs:ro
    environment:
      - UAG_CONFIG_FILE=/app/config/docker.toml
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - UAG_DATABASE_URL=postgresql://uag_user:uag_password@postgres:5432/universal_ai_governor
      - UAG_REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - uag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: uag-postgres
    environment:
      - POSTGRES_DB=universal_ai_governor
      - POSTGRES_USER=uag_user
      - POSTGRES_PASSWORD=uag_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - uag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U uag_user -d universal_ai_governor"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: uag-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - uag-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: uag-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - uag-network
    depends_on:
      - universal-ai-governor

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: uag-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - uag-network
    depends_on:
      - prometheus

  # Jaeger tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: uag-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped
    networks:
      - uag-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: uag-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    networks:
      - uag-network
    depends_on:
      - universal-ai-governor

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: uag-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - uag-network

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: uag-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/uag:ro
      - /var/log:/var/log/host:ro
    restart: unless-stopped
    networks:
      - uag-network
    depends_on:
      - loki

  # MinIO object storage (for models and data)
  minio:
    image: minio/minio:latest
    container_name: uag-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio_admin
      - MINIO_ROOT_PASSWORD=minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    networks:
      - uag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  minio_data:
    driver: local

networks:
  uag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
